body {
    font: 18px Calibri;
}

body .secure {
    opacity: 0;
}

body.auth .secure {
    transition: opacity .6s;
    opacity: 1;
}

h1 {
    margin: .125rem;
}

article > h1 {
    background: rgb(255, 255, 255);
    padding: 0 .25rem;
    display: inline-block;
}

.hide { display: none; }

.loading {
    background: url(loading.svg) no-repeat center center!important;
    background-size: 42px 42px!important;
    min-height: 42px!important;
}

.loading > * {
    opacity: .5;
    transition: opacity .3s;
}

.disabled, [disabled] {
    pointer-events: none!important;
    opacity: .7!important;
    cursor: default!important;
}

.modal {
    position: fixed;
    top: 0; right: 0; bottom: 0; left: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    pointer-events: none;
    transition: opacity .3s;
}

.modal.open {
    opacity: 1;
    pointer-events: inherit;
}

.modal:not(.open) > .body {
    opacity: 0;
}

.modal.loading {
    pointer-events: none!important;
}

.modal .errors {
    color: red;
    font-weight: bold;
}

.modal .errors:empty {
    display: none;
}

.modal label {
    text-transform: uppercase;
    font-size: .7rem;
    font-weight: bold;
    margin: .25rem 0 0;
}

.modal span {
    font-size: .7rem;
    width: 100%;
    margin-top: .5rem;
}

.modal span:not(.errors) {
    text-align: center;
}

.modal > .body {
    border-radius: 1rem;
    padding: 1rem;
    display: flex;
    flex-wrap: wrap;
    transition: transform ease-in-out .6s;
    border: 2px solid transparent;
    min-height: 4rem;
}

.modal.login > .body { max-width: 280px; }
.modal.register > .body { max-width: 280px; }
/*.modal.edit-order > .body { min-width: 280px; }
.modal.edit-order[data-status=valid] > .body { max-width: 280px; }
.modal.edit-order .challenge-desc { font-weight: bold; font-size: .85rem; }
.modal.edit-order .materials { font-size: .7rem; }*/
.modal > .body > div { width: 100%; }

input, select, textarea {
    box-sizing: border-box;
    width: 100%;
    margin: .25rem 0;
    font: inherit;
    border-radius: .25rem;
    padding: .5rem;
    outline: 0;
    border: 1px solid transparent;
    transition: all .3s;
}

input[type=button] {
    cursor: pointer;
    font-weight: bold;
}

/*.accounts.zone { color: rgb(151, 0, 0); }
.accounts.zone > article { border-color: rgb(151, 0, 0); margin: .5rem .125rem .25rem; }
.accounts.zone > article:hover { background: rgb(151, 0, 0); }
.accounts.zone > article[data-env=test] { opacity: .6; }
.accounts.zone > a { background: rgb(151, 0, 0); }
.orders.zone { color: rgb(144, 144, 0); background: rgb(255, 255, 255); display: flex; flex-wrap: wrap; }
.orders.zone > article { border-color: rgb(144, 144, 0); flex-grow: 1; }
.orders.zone > article:hover { background: rgb(144, 144, 0); }
.orders.zone > a { background: rgb(144, 144, 0); }*/
section > span {
    background: rgb(255, 255, 255);
    border: 1px solid rgb(84, 84, 84);
    border-color: inherit;
    padding: .125rem .25rem;
    margin: 0 .125rem;
    display: inline-block;
    overflow-x: hidden;
 }
.zone > article { border: 2px dashed transparent; margin: .25rem; padding: .25rem; position: relative; cursor: pointer; transition: background-color .3s; }
.zone > p { margin: 0 .125rem .25rem; }
.zone > a { color: rgb(255, 255, 255); text-decoration: none; padding: .25rem .6rem; margin: .25rem; display: flex; align-items: center; justify-content: center; max-width: .65rem; }
.zone > article > .delete:hover { color: rgb(255, 255, 255); background: rgb(151, 0, 0); }
.zone > article > .delete { 
    position: absolute; 
    top: 0; right: .3rem; 
    color: red; background: rgb(255, 255, 255);
    border-radius: 100%;
    width: 1rem; height: 1rem;
    display: flex; justify-content: center; align-items: center;
    line-height: 1;
    cursor: pointer; font-weight: bold; font-size: 1.2rem;
}

/*.modal .status { display: none; }
.modal .sub-status { display: none; }
.modal[data-status=pending] .pending.status { display: initial; }
.modal[data-status=valid] .valid.status { display: initial; }
.modal[data-status=ready] .ready.status { display: initial; }
.modal[data-status=invalid] .invalid.status { display: initial; }
.modal[data-sub-status=pending] .pending.sub-status { display: initial; }
.modal[data-sub-status=valid] .valid.sub-status { display: initial; }
.modal[data-sub-status=invalid] .invalid.sub-status { display: initial; }
.modal[data-cert-type] div.cert-type { display: none; }
.modal[data-cert-type=pem] div.cert-type.pem { display: initial; }
.modal[data-cert-type=pfx] div.cert-type.pfx { display: initial; }*/

.modal { background: rgba(0, 0, 0, .85); }
.modal > .body { background: rgb(255, 255, 255); }
.modal input[type=button]:hover { background: rgba(201, 201, 201, .6); }
.modal input[type=button]:not(:hover) { color: rgb(255, 255, 255); }
.modal input:hover, .modal select:hover, .modal textarea:hover { border-color: rgba(201, 201, 201, .6); }
.secure > .modal { background: rgba(201, 201, 201, .6); }

.modal.login input:focus, .modal.login select:focus, .modal.login textarea:focus { border-color: rgb(0, 110, 201); }
.modal.login input[type=button]:not(:hover) { background: rgb(0, 110, 201); }
.modal.login a, .modal.login input[type=button]:hover, .modal.login label { color: rgb(0, 110, 201); }

.modal.register input:focus, .modal.register select:focus, .modal.register textarea:focus { border-color: rgb(0, 85, 0); }
.modal.register input[type=button]:not(:hover) { background: rgb(0, 85, 0); }
.modal.register a, .modal.register input[type=button]:hover, .modal.register label { color: rgb(0, 85, 0); }

/*.modal.account input:focus, .modal.account select:focus, .modal.account textarea:focus, .modal.account > .body { border-color: rgb(151, 0, 0); }
.modal.account input[type=button]:not(:hover) { background: rgb(151, 0, 0); }
.modal.account a, .modal.account input[type=button]:hover, .modal.account label { color: rgb(151, 0, 0); }

.modal.order input:focus, .modal.order select:focus, .modal.order textarea:focus, .modal.order > .body { border-color: rgb(144, 144, 0); }
.modal.order input[type=button]:not(:hover) { background: rgb(144, 144, 0); }
.modal.order a, .modal.order input[type=button]:hover, .modal.order label { color: rgb(144, 144, 0); }*/
